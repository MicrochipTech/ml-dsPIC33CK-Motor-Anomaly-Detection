/* This is an autogenerated file from a template. Do not edit this file as it will be overwritten.*/
/**
 *
 * fault_detect_params.h
 *
 * Fault detection parameters
 *
 * Component: supervisory
 */ /*
 *
 * Motor Control Application Framework
 * R7/RC37 (commit 116330, build on 2023 Feb 09)
 *
 * (c) 2017 - 2023 Microchip Technology Inc. and its subsidiaries. You may use
 * this software and any derivatives exclusively with Microchip products.
 *
 * This software and any accompanying information is for suggestion only.
 * It does not modify Microchip's standard warranty for its products.
 * You agree that you are solely responsible for testing the software and
 * determining its suitability.  Microchip has no obligation to modify,
 * test, certify, or support the software.
 *
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
 * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
 * AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS INTERACTION WITH
 * MICROCHIP PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE IN ANY
 * APPLICATION.
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL,
 * PUNITIVE, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF
 * ANY KIND WHATSOEVER RELATED TO THE USE OF THIS SOFTWARE, THE
 * motorBench(R) DEVELOPMENT SUITE TOOL, PARAMETERS AND GENERATED CODE,
 * HOWEVER CAUSED, BY END USERS, WHETHER MICROCHIP'S CUSTOMERS OR
 * CUSTOMER'S CUSTOMERS, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGES OR THE DAMAGES ARE FORESEEABLE. TO THE
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL
 * CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT
 * OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS
 * SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF
 * THESE TERMS.
 *
 *
 ******************************************************************************/
#ifndef __FAULT_DETECT_PARAMS_H
#define __FAULT_DETECT_PARAMS_H

#ifdef  __cplusplus
extern "C" {
#endif

/* overcurrent threshold (109.2% of rated allowable current) */
#define THRESHOLD_OVERCURRENT_STALL_DETECT        951      // Q15(  0.02902) =   +1.26711 A           =   +1.26699 A           + 0.0094%

/*
 * natural_freq_current:         235.525  Hz
 * current loop natural frequency

 * natural_freq_velocity:         14.522  Hz
 * velocity loop natural frequency
 */

/* decimation factor for 2 stage filter LPF */
#define DECIMATION_FACTOR                     100      // Q0(100.00000)  = +100.00000             = +100.00000             + 0.0000%
/* 
 * Coefficient a1 for 2 stage implementation of LPF. Equation used for calculation:
 * f3db*Ts*2*pi. f3db for 1st stage is 10hz
 */
#define DECIMATION_FILTER_LPF1_VARIANCE_DETECT_COEFFA1        103      // Q15(  0.00314) =  +10.00547 Hz          =  +10.00000 Hz          + 0.0547%
/* 
 * Coefficient a1 for 2 stage implementation of LPF. Equation used for calculation:
 * f3db*Ts*2*pi. f3db for second stage is 1/10th of the natural frequency, Ts is 1/200hz
 */
#define DECIMATION_FILTER_LPF2_VARIANCE_DETECT_COEFFA1       1495      // Q15(  0.04562) =   +1.45225 Hz          =   +1.45223 Hz          + 0.0015%
/* 
 * LPF filter coefficient for over current detect. Equation used for calculation:
 * f3db*Ts*2*pi f3d is equal to natural frequency
 */
#define FILTER_LPF_OVERCURRENT_DETECT         149      // Q15(  0.00455) =  +14.47393 Hz          =  +14.52228 Hz          - 0.3329%
/* 
 * LPF filter coefficient for negative Ed detect. Equation used for calculation:
 * f3db*Ts*2*pi f3d is equal to natural frequency
 */
#define FILTER_LPF_NEGATIVE_ED_DETECT         149      // Q15(  0.00455) =  +14.47393 Hz          =  +14.52228 Hz          - 0.3329%
/* 
 * HPF filter coefficient for 16bit implementation of HPF.
 * f3db is 2x natural frequency.
 */
#define FILTER_HPF_VARIANCE_DETECT            598      // Q16(  0.00912) =  +29.04500 Hz          =  +29.04455 Hz          + 0.0015%
/* 
 * Timer threshold to trigger low speed detect.
 * It is set to 3 times (1/natural frequency of velocity loop)
 */
#define ACTIVE_TIMER_THRESHOLD_LOW_SPEED_DETECT       4132      // Q0(4132.00000) = +206.60000 ms          = +206.57918 ms          + 0.0101%
/* 
 * Inactive timer threshold for low speed detect.
 * It is set to (2.0/natural frequency of velocity loop),
 * in units of the ADC ISR period.
 */
#define INACTIVE_TIMER_THRESHOLD_LOW_SPEED_DETECT       4132      // Q0(4132.00000) = +206.60000 ms          = +206.57918 ms          + 0.0101%
/* 
 * Overcurrent detector. Normally if the saturation limit was exceeded,
 * then we have a fault in the controllers.
 * then the error should immediately trigger
 * Timer threshold to trigger over currents detect.
 * It is set to 2 times (1/natural frequency of current loop)
 */
#define TIMER_COUNTS_OVERCURRENT_DETECT        170      // Q0(170.00000)  =   +8.50000 ms          =   +8.49167 ms          + 0.0981%
/* 
 * Timer threshold to trigger negative Ed stall detect.
 * It is set to 5 times (1/natural frequency of velocity loop)
 */
#define ACTIVE_TIMER_THRESHOLD_NEGATIVE_ED_DETECT       6886      // Q0(6886.00000) = +344.30000 ms          = +344.29863 ms          + 0.0004%
/* 
 * Timer threshold to trigger negative Ed stall detect.
 * It is set to 5 times (1/natural frequency of velocity loop)
 */
#define INACTIVE_TIMER_THRESHOLD_NEGATIVE_ED_DETECT       6886      // Q0(6886.00000) = +344.30000 ms          = +344.29863 ms          + 0.0004%
/* 
 * Timer threshold to trigger stall detect based on torque angle.
 * It is set to 3 times (1/natural frequency of velocity loop)
 */
#define ACTIVE_TIMER_THRESHOLD_TORQUE_ANGLE_DETECT       4132      // Q0(4132.00000) = +206.60000 ms          = +206.57918 ms          + 0.0101%
/* 
 * Inactive Timer threshold for stall detect based on torque angle.
 * It is set to 3 times (1/natural frequency of velocity loop)
 */
#define INACTIVE_TIMER_THRESHOLD_TORQUE_ANGLE_DETECT       4132      // Q0(4132.00000) = +206.60000 ms          = +206.57918 ms          + 0.0101%
/* 
 * Timer threshold to trigger stall detect based on variance in Ed and Eq.
 * It is set to (1/natural frequency of velocity loop)
 */
#define TIMER_COUNTS_VARIANCE_DETECT           14      // Q0( 14.00000)  =  +70.00000 ms          =  +68.85973 ms          + 1.6559%

/* Threshold for under speed detect as a fixed fraction of minimum velocity */
#define THRESHOLD_UNDERSPEED_STALL_DETECT  ((int16_t)(0.333*MCAF_VELOCITY_COMMAND_MIN))
/* Ed detect threshold */
#define THRESHOLD_ED_STALL_DETECT               5      // Q15(  0.00015) =  +10.87952 mV          =  +10.00000 mV          + 8.7952%

/*
 * max error from modified polynomial approximation 0.038799
 * limited normalized frequency omega_c1 = 0.1
 * max error above omega_c1 = 0.018585
 */
/* torque angle threshold polynomial, constant term */
#define STALL_DETECT_TORQUE_ANGLE_COEFF0       9066      // Q15(  0.27667) = +276.67236 m           = +276.68042 m           - 0.0029%
/* torque angle threshold polynomial, linear term */
#define STALL_DETECT_TORQUE_ANGLE_COEFF1      19225      // Q15(  0.58670) = +586.70044 m           = +586.68728 m           + 0.0022%
/* torque angle threshold polynomial, quadratic term */
#define STALL_DETECT_TORQUE_ANGLE_COEFF2       4149      // Q15(  0.12662) = +126.61743 m           = +126.63230 m           - 0.0117%
#define STALL_DETECT_TORQUE_ANGLE_K         11038      // Q15(  0.33685) = +336.85303 m           = +336.85276 m           + 0.0001%
/* Maximum velocity for torque angle stall detection (we inhibit at faster speeds) */
#define STALL_DETECT_TORQUE_ANGLE_VELOCITY_THRESHOLD       8738      // Q15(  0.26666) = +130.89770 rad/s       = +130.89969 rad/s       - 0.0015%

/* overvoltage fault threshold */
#define VDC_OVERVOLTAGE_THRESHOLD           22979      // Q15(  0.70126) =  +50.00008 V           =  +50.00000 V           + 0.0002%
/* undervoltage fault threshold */
#define VDC_UNDERVOLTAGE_THRESHOLD           4596      // Q15(  0.14026) =  +10.00045 V           =  +10.00000 V           + 0.0045%
/* overtemperature fault threshold */
#define MCAF_OVERTEMPERATURE_THRESHOLD       5000      // Q15(  0.15259) =  +50.00000 C           =  +50.00000 C           + 0.0000%

#ifdef  __cplusplus
}
#endif

#endif // __FAULT_DETECT_PARAMS_H
